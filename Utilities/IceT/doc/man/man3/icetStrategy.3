'\" t
.\" Manual page created with latex2man on Fri Sep 19 09:25:32 MDT 2008
.\" NOTE: This file is generated, DO NOT EDIT.
.de Vb
.ft CW
.nf
..
.de Ve
.ft R

.fi
..
.TH "icetStrategy" "3" "February 13, 2008" "\fBIceT \fPReference" "\fBIceT \fPReference"
.SH NAME

\fBicetStrategy \-\- set the strategy used to composite images.\fP
.PP
.SH Synopsis

.PP
#include <GL/ice\-t.h>
.PP
.TS H
l l l .
void \fBicetStrategy\fP(	\fBIceTStrategy\fP	\fIstrategy\fP  );
.TE
.PP
.SH Description

.PP
The \fBIceT \fPAPI comes packaged with several algorithms for compositing 
images. The algorithm to use is determined by selecting a 
\fIstrategy\fP\&.
The strategy is selected with \fBicetStrategy\fP\&.
A 
strategy must be selected before \fBicetDrawFrame\fP
is called. 
.PP
The \fIstrategy\fP
is of type \fBIceTStrategy\fP\&.
This is an opaque 
type. There are no conventions to create or change an 
\fBIceTStrategy\fP,
but there are several predefined strategies to 
select from. They are: 
.PP
.TP
\fBICET_STRATEGY_SERIAL\fP
 Basically applies a ``traditional\&'' 
single tile composition (such as binary swap) to each tile in the order 
they were defined. Because each process must take part in the 
composition of each tile regardless of whether they draw into it, this 
strategy is usually very inefficient when compositing for more than 
tile. It is provided mostly for comparative purposes. 
.TP
\fBICET_STRATEGY_DIRECT\fP
 As each process renders an image 
for a tile, that image is sent directly to the process that will 
display that tile. This usually results in a few processes receiving 
and processing the majority of the data, and is therefore usually an 
inefficient strategy. 
.TP
\fBICET_STRATEGY_SPLIT\fP
 Like \fBICET_STRATEGY_DIRECT\fP,
except that the tiles are split up, and each process is assigned a 
piece of a tile in such a way that each process receives and handles 
about the same amount of data. This strategy is often very efficient, 
but due to the large amount of messages passed, it has not proven to be 
very scalable or robust. 
.TP
\fBICET_STRATEGY_REDUCE\fP
 A two phase algorithm. In the 
first phase, tile images are redistributed such that each process has 
one image for one tile. In the second phase, a ``traditional\&'' single 
tile composition is performed for each tile. Since each process 
contains an image for only one tile, all these compositions may happen 
simultaneously. This is a well rounded strategy that seems to perform 
well in a wide variety of applications. 
.TP
\fBICET_STRATEGY_VTREE\fP
 An extension to the binary tree 
algorithm for image composition. Sets up a `virtual\&' composition tree 
for each tile image. Processes that belong to multiple trees (because 
they render to more than one tile) are allowed to float between trees. 
This strategy is not quite as well load balanced as 
\fBICET_STRATEGY_REDUCE\fP
or \fBICET_STRATEGY_SPLIT\fP,
but 
has very well behaved network communication. 
.PP
Not all of the strategies support ordered image composition. 
\fBICET_STRATEGY_SERIAL\fP,
\fBICET_STRATEGY_DIRECT\fP,
and 
\fBICET_STRATEGY_REDUCE\fP
do support ordered image composition. 
\fBICET_STRATEGY_SPLIT\fP
and \fBICET_STRATEGY_VTREE\fP
do not 
support ordered image composition and will ignore 
\fBICET_ORDERED_COMPOSITE\fP
if it is enabled. 
.PP
.SH Errors

.PP
None. 
.PP
.SH Warnings

.PP
None. 
.PP
.SH Bugs

.PP
Use the \fBICET_STRATEGY_SPLIT\fP
strategy with care. It has proven 
to be unreliable on several high\-speed interconnects. Avoid using it at 
all in a production application. 
.PP
.SH Copyright

Copyright (C)2003 Sandia Corporation 
.PP
Under the terms of Contract DE\-AC04\-94AL85000, there is a non\-exclusive 
license for use of this work by or on behalf of the U.S. Government. 
Redistribution and use in source and binary forms, with or without 
modification, are permitted provided that this Notice and any statement 
of authorship are reproduced on all copies. 
.PP
.SH See Also

.PP
\fIicetDrawFrame\fP(3),
\fIicetGetStrategyName\fP(3)
.PP
.\" NOTE: This file is generated, DO NOT EDIT.
