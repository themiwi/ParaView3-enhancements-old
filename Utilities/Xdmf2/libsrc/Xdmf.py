# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.31
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _Xdmf
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


_FILE_OFFSET_BITS = _Xdmf._FILE_OFFSET_BITS
XDMF_SUCCESS = _Xdmf.XDMF_SUCCESS
XDMF_FAIL = _Xdmf.XDMF_FAIL
XDMF_TRUE = _Xdmf.XDMF_TRUE
XDMF_FALSE = _Xdmf.XDMF_FALSE
XDMF_MAX_DIMENSION = _Xdmf.XDMF_MAX_DIMENSION
XDMF_MAX_STRING_LENGTH = _Xdmf.XDMF_MAX_STRING_LENGTH
XDMF_DEFAULT_INDEX = _Xdmf.XDMF_DEFAULT_INDEX
XDMF_SELECT_SLAB = _Xdmf.XDMF_SELECT_SLAB
XDMF_SELECT_INDEX = _Xdmf.XDMF_SELECT_INDEX
XDMF_UNKNOWN_TYPE = _Xdmf.XDMF_UNKNOWN_TYPE
XDMF_INT8_TYPE = _Xdmf.XDMF_INT8_TYPE
XDMF_INT16_TYPE = _Xdmf.XDMF_INT16_TYPE
XDMF_INT32_TYPE = _Xdmf.XDMF_INT32_TYPE
XDMF_INT64_TYPE = _Xdmf.XDMF_INT64_TYPE
XDMF_FLOAT32_TYPE = _Xdmf.XDMF_FLOAT32_TYPE
XDMF_FLOAT64_TYPE = _Xdmf.XDMF_FLOAT64_TYPE
XDMF_UINT8_TYPE = _Xdmf.XDMF_UINT8_TYPE
XDMF_UINT16_TYPE = _Xdmf.XDMF_UINT16_TYPE
XDMF_UINT32_TYPE = _Xdmf.XDMF_UINT32_TYPE
XDMF_COMPOUND_TYPE = _Xdmf.XDMF_COMPOUND_TYPE
class XdmfObject(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XdmfObject, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XdmfObject, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Xdmf.new_XdmfObject(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Xdmf.delete_XdmfObject
    __del__ = lambda self : None;
    def GetClassName(*args): return _Xdmf.XdmfObject_GetClassName(*args)
    def SetDebug(*args): return _Xdmf.XdmfObject_SetDebug(*args)
    def GetDebug(*args): return _Xdmf.XdmfObject_GetDebug(*args)
    def GetGlobalDebug(*args): return _Xdmf.XdmfObject_GetGlobalDebug(*args)
    def SetGlobalDebug(*args): return _Xdmf.XdmfObject_SetGlobalDebug(*args)
    def SetGlobalDebugOn(*args): return _Xdmf.XdmfObject_SetGlobalDebugOn(*args)
    def SetGlobalDebugOff(*args): return _Xdmf.XdmfObject_SetGlobalDebugOff(*args)
XdmfObject_swigregister = _Xdmf.XdmfObject_swigregister
XdmfObject_swigregister(XdmfObject)

SetGlobalDebugOn = _Xdmf.SetGlobalDebugOn
SetGlobalDebugOff = _Xdmf.SetGlobalDebugOff
GetGlobalDebug = _Xdmf.GetGlobalDebug
SetGlobalDebug = _Xdmf.SetGlobalDebug
XdmfObjectToHandle = _Xdmf.XdmfObjectToHandle
HandleToXdmfObject = _Xdmf.HandleToXdmfObject

GetUnique = _Xdmf.GetUnique

