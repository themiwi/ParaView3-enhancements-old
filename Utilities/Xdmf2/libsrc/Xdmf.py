# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.31
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _Xdmf
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


_FILE_OFFSET_BITS = _Xdmf._FILE_OFFSET_BITS
XDMF_SUCCESS = _Xdmf.XDMF_SUCCESS
XDMF_FAIL = _Xdmf.XDMF_FAIL
XDMF_TRUE = _Xdmf.XDMF_TRUE
XDMF_FALSE = _Xdmf.XDMF_FALSE
XDMF_MAX_DIMENSION = _Xdmf.XDMF_MAX_DIMENSION
XDMF_MAX_STRING_LENGTH = _Xdmf.XDMF_MAX_STRING_LENGTH
XDMF_DEFAULT_INDEX = _Xdmf.XDMF_DEFAULT_INDEX
XDMF_SELECT_SLAB = _Xdmf.XDMF_SELECT_SLAB
XDMF_SELECT_INDEX = _Xdmf.XDMF_SELECT_INDEX
XDMF_UNKNOWN_TYPE = _Xdmf.XDMF_UNKNOWN_TYPE
XDMF_INT8_TYPE = _Xdmf.XDMF_INT8_TYPE
XDMF_INT16_TYPE = _Xdmf.XDMF_INT16_TYPE
XDMF_INT32_TYPE = _Xdmf.XDMF_INT32_TYPE
XDMF_INT64_TYPE = _Xdmf.XDMF_INT64_TYPE
XDMF_FLOAT32_TYPE = _Xdmf.XDMF_FLOAT32_TYPE
XDMF_FLOAT64_TYPE = _Xdmf.XDMF_FLOAT64_TYPE
XDMF_UINT8_TYPE = _Xdmf.XDMF_UINT8_TYPE
XDMF_UINT16_TYPE = _Xdmf.XDMF_UINT16_TYPE
XDMF_UINT32_TYPE = _Xdmf.XDMF_UINT32_TYPE
XDMF_COMPOUND_TYPE = _Xdmf.XDMF_COMPOUND_TYPE
class XdmfObject(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XdmfObject, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XdmfObject, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Xdmf.new_XdmfObject(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Xdmf.delete_XdmfObject
    __del__ = lambda self : None;
    def GetClassName(*args): return _Xdmf.XdmfObject_GetClassName(*args)
    def SetDebug(*args): return _Xdmf.XdmfObject_SetDebug(*args)
    def GetDebug(*args): return _Xdmf.XdmfObject_GetDebug(*args)
    def GetGlobalDebug(*args): return _Xdmf.XdmfObject_GetGlobalDebug(*args)
    def SetGlobalDebug(*args): return _Xdmf.XdmfObject_SetGlobalDebug(*args)
    def SetGlobalDebugOn(*args): return _Xdmf.XdmfObject_SetGlobalDebugOn(*args)
    def SetGlobalDebugOff(*args): return _Xdmf.XdmfObject_SetGlobalDebugOff(*args)
XdmfObject_swigregister = _Xdmf.XdmfObject_swigregister
XdmfObject_swigregister(XdmfObject)

SetGlobalDebugOn = _Xdmf.SetGlobalDebugOn
SetGlobalDebugOff = _Xdmf.SetGlobalDebugOff
GetGlobalDebug = _Xdmf.GetGlobalDebug
SetGlobalDebug = _Xdmf.SetGlobalDebug
XdmfObjectToHandle = _Xdmf.XdmfObjectToHandle
HandleToXdmfObject = _Xdmf.HandleToXdmfObject
class XdmfLightData(XdmfObject):
    __swig_setmethods__ = {}
    for _s in [XdmfObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, XdmfLightData, name, value)
    __swig_getmethods__ = {}
    for _s in [XdmfObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, XdmfLightData, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Xdmf.new_XdmfLightData(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Xdmf.delete_XdmfLightData
    __del__ = lambda self : None;
    def GetClassName(*args): return _Xdmf.XdmfLightData_GetClassName(*args)
    def SetName(*args): return _Xdmf.XdmfLightData_SetName(*args)
    def GetName(*args): return _Xdmf.XdmfLightData_GetName(*args)
    def SetFileName(*args): return _Xdmf.XdmfLightData_SetFileName(*args)
    def GetFileName(*args): return _Xdmf.XdmfLightData_GetFileName(*args)
    def SetWorkingDirectory(*args): return _Xdmf.XdmfLightData_SetWorkingDirectory(*args)
    def GetWorkingDirectory(*args): return _Xdmf.XdmfLightData_GetWorkingDirectory(*args)
    def GetInitialized(*args): return _Xdmf.XdmfLightData_GetInitialized(*args)
    def SetInitialized(*args): return _Xdmf.XdmfLightData_SetInitialized(*args)
    def GetReturnBuffer(*args): return _Xdmf.XdmfLightData_GetReturnBuffer(*args)
XdmfLightData_swigregister = _Xdmf.XdmfLightData_swigregister
XdmfLightData_swigregister(XdmfLightData)
GetUnique = _Xdmf.GetUnique

class XdmfDOM(XdmfLightData):
    __swig_setmethods__ = {}
    for _s in [XdmfLightData]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, XdmfDOM, name, value)
    __swig_getmethods__ = {}
    for _s in [XdmfLightData]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, XdmfDOM, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Xdmf.new_XdmfDOM(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Xdmf.delete_XdmfDOM
    __del__ = lambda self : None;
    def GetClassName(*args): return _Xdmf.XdmfDOM_GetClassName(*args)
    def SetInputFileName(*args): return _Xdmf.XdmfDOM_SetInputFileName(*args)
    def SetOutputFileName(*args): return _Xdmf.XdmfDOM_SetOutputFileName(*args)
    def GetInputFileName(*args): return _Xdmf.XdmfDOM_GetInputFileName(*args)
    def GetOutputFileName(*args): return _Xdmf.XdmfDOM_GetOutputFileName(*args)
    def SetParserOptions(*args): return _Xdmf.XdmfDOM_SetParserOptions(*args)
    def GetOutput(*args): return _Xdmf.XdmfDOM_GetOutput(*args)
    def SetOutput(*args): return _Xdmf.XdmfDOM_SetOutput(*args)
    def GetInput(*args): return _Xdmf.XdmfDOM_GetInput(*args)
    def SetInput(*args): return _Xdmf.XdmfDOM_SetInput(*args)
    def GenerateHead(*args): return _Xdmf.XdmfDOM_GenerateHead(*args)
    def Puts(*args): return _Xdmf.XdmfDOM_Puts(*args)
    def GenerateTail(*args): return _Xdmf.XdmfDOM_GenerateTail(*args)
    def GetTree(*args): return _Xdmf.XdmfDOM_GetTree(*args)
    def __Parse(*args): return _Xdmf.XdmfDOM___Parse(*args)
    def Parse(*args): return _Xdmf.XdmfDOM_Parse(*args)
    def GetRoot(*args): return _Xdmf.XdmfDOM_GetRoot(*args)
    def GetNumberOfChildren(*args): return _Xdmf.XdmfDOM_GetNumberOfChildren(*args)
    def GetChild(*args): return _Xdmf.XdmfDOM_GetChild(*args)
    def GetNumberOfAttributes(*args): return _Xdmf.XdmfDOM_GetNumberOfAttributes(*args)
    def GetAttributeName(*args): return _Xdmf.XdmfDOM_GetAttributeName(*args)
    def IsChild(*args): return _Xdmf.XdmfDOM_IsChild(*args)
    def Serialize(*args): return _Xdmf.XdmfDOM_Serialize(*args)
    def Write(*args): return _Xdmf.XdmfDOM_Write(*args)
    def Insert(*args): return _Xdmf.XdmfDOM_Insert(*args)
    def InsertFromString(*args): return _Xdmf.XdmfDOM_InsertFromString(*args)
    def DeleteNode(*args): return _Xdmf.XdmfDOM_DeleteNode(*args)
    def FindElement(*args): return _Xdmf.XdmfDOM_FindElement(*args)
    def FindElementByAttribute(*args): return _Xdmf.XdmfDOM_FindElementByAttribute(*args)
    def FindNumberOfElements(*args): return _Xdmf.XdmfDOM_FindNumberOfElements(*args)
    def FindNumberOfElementsByAttribute(*args): return _Xdmf.XdmfDOM_FindNumberOfElementsByAttribute(*args)
    def GetNdgmHost(*args): return _Xdmf.XdmfDOM_GetNdgmHost(*args)
    def SetNdgmHost(*args): return _Xdmf.XdmfDOM_SetNdgmHost(*args)
    def Get(*args): return _Xdmf.XdmfDOM_Get(*args)
    def GetAttribute(*args): return _Xdmf.XdmfDOM_GetAttribute(*args)
    def GetCData(*args): return _Xdmf.XdmfDOM_GetCData(*args)
    def Set(*args): return _Xdmf.XdmfDOM_Set(*args)
XdmfDOM_swigregister = _Xdmf.XdmfDOM_swigregister
XdmfDOM_swigregister(XdmfDOM)

HandleToXdmfDOM = _Xdmf.HandleToXdmfDOM
class XdmfElement(XdmfLightData):
    __swig_setmethods__ = {}
    for _s in [XdmfLightData]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, XdmfElement, name, value)
    __swig_getmethods__ = {}
    for _s in [XdmfLightData]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, XdmfElement, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Xdmf.new_XdmfElement(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Xdmf.delete_XdmfElement
    __del__ = lambda self : None;
    def GetClassName(*args): return _Xdmf.XdmfElement_GetClassName(*args)
    def SetDOM(*args): return _Xdmf.XdmfElement_SetDOM(*args)
    def GetDOM(*args): return _Xdmf.XdmfElement_GetDOM(*args)
    def SetElement(*args): return _Xdmf.XdmfElement_SetElement(*args)
    def GetElement(*args): return _Xdmf.XdmfElement_GetElement(*args)
    def GetElementType(*args): return _Xdmf.XdmfElement_GetElementType(*args)
    def UpdateInformation(*args): return _Xdmf.XdmfElement_UpdateInformation(*args)
    def Update(*args): return _Xdmf.XdmfElement_Update(*args)
    def UpdateDOM(*args): return _Xdmf.XdmfElement_UpdateDOM(*args)
    def Set(*args): return _Xdmf.XdmfElement_Set(*args)
    def Get(*args): return _Xdmf.XdmfElement_Get(*args)
XdmfElement_swigregister = _Xdmf.XdmfElement_swigregister
XdmfElement_swigregister(XdmfElement)

class XdmfInformation(XdmfElement):
    __swig_setmethods__ = {}
    for _s in [XdmfElement]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, XdmfInformation, name, value)
    __swig_getmethods__ = {}
    for _s in [XdmfElement]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, XdmfInformation, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Xdmf.new_XdmfInformation(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Xdmf.delete_XdmfInformation
    __del__ = lambda self : None;
    def GetClassName(*args): return _Xdmf.XdmfInformation_GetClassName(*args)
    def UpdateInformation(*args): return _Xdmf.XdmfInformation_UpdateInformation(*args)
    def SetValue(*args): return _Xdmf.XdmfInformation_SetValue(*args)
    def UpdateDOM(*args): return _Xdmf.XdmfInformation_UpdateDOM(*args)
    def GetValue(*args): return _Xdmf.XdmfInformation_GetValue(*args)
XdmfInformation_swigregister = _Xdmf.XdmfInformation_swigregister
XdmfInformation_swigregister(XdmfInformation)



