// This file is generated.  Do not edit.


/*=========================================================================

  Program:   Visualization Toolkit
  Module:    $RCSfile: vtkPVPythonPluginInit.cxx.in,v $

  Copyright (c) Ken Martin, Will Schroeder, Bill Lorensen
  All rights reserved.
  See Copyright.txt or http://www.kitware.com/Copyright.htm for details.

     This software is distributed WITHOUT ANY WARRANTY; without even
     the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
     PURPOSE.  See the above copyright notice for more information.

=========================================================================*/
/*-------------------------------------------------------------------------
  Copyright 2009 Sandia Corporation.
  Under the terms of Contract DE-AC04-94AL85000 with Sandia Corporation,
  the U.S. Government retains certain rights in this software.
-------------------------------------------------------------------------*/

@WRAP_PYTHON_INCLUDES@

#ifdef _WIN32
// __cdecl gives an unmangled name
#define C_DECL __cdecl
#define C_EXPORT extern "C" __declspec(dllexport)
#else
#define C_DECL
#define C_EXPORT extern "C"
#endif


// entry point to get Plugin name a string
C_EXPORT char* C_DECL ParaViewPluginName()
{
  return "@PLUGIN_NAME@";
}

// entry point to get Plugin version as a string
C_EXPORT char* C_DECL ParaViewPluginVersion()
{
  return "@PLUGIN_VERSION@";
}

namespace {
  class StaticInitPythonSource
  {
  public:
    StaticInitPythonSource() {
      static const char *moduleNames[] = {
        @PY_MODULE_LIST@
      };
      static char *moduleSources[] = {
        @PY_LOADER_LIST@
      };
      static const int packageFlags[] = {
        @PY_PACKAGE_FLAGS@
      };

      this->ModuleNames = moduleNames;
      this->ModuleSources = moduleSources;
      this->PackageFlags = packageFlags;
      this->NumberOfModules = sizeof(moduleNames)/sizeof(const char *);
    }
    ~StaticInitPythonSource() {
      // Clean up allocated arrays
      for (int i = 0; i < this->NumberOfModules; i++)
        {
        delete[] this->ModuleSources[i];
        }
    }

    const char **ModuleNames;
    char **ModuleSources;
    const int *PackageFlags;
    int NumberOfModules;
  };
}

// Entry point to get XML as string.
C_EXPORT void C_DECL ParaViewPluginPythonSourceList(int &num,
                                                    const char **&modules,
                                                    const char **&sources,
                                                    const int *&package_flags)
{
  static StaticInitPythonSource staticinit;
  num = staticinit.NumberOfModules;
  modules = staticinit.ModuleNames;
  sources = const_cast<const char **>(staticinit.ModuleSources);
  package_flags = staticinit.PackageFlags;
}
