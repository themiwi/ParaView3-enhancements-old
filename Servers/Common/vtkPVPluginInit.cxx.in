// This file is generated.  Do not edit.


/*=========================================================================

  Program:   ParaView
  Module:    $RCSfile: vtkPVPluginInit.cxx.in,v $

  Copyright (c) Kitware, Inc.
  All rights reserved.
  See Copyright.txt or http://www.paraview.org/HTML/Copyright.html for details.

     This software is distributed WITHOUT ANY WARRANTY; without even
     the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
     PURPOSE.  See the above copyright notice for more information.

=========================================================================*/

#if @HAVE_XML@
#include "@XML_HEADER@"
#endif // HAVE_XML

#ifdef _WIN32
// __cdecl gives an unmangled name
#define C_DECL __cdecl
#define C_EXPORT extern "C" __declspec(dllexport)
#else
#define C_DECL
#define C_EXPORT extern "C"
#endif

#if @HAVE_XML@

namespace {
  class StaticInitXML
  {
    public:
    StaticInitXML()
    {
      static char* xmls[] = 
      {
        @XML_GET_INTERFACE@
      };

      XMLString = xmls;
      NumberOfStrings = sizeof(xmls) / sizeof(char*);
    }
    ~StaticInitXML()
    {
      // clean up new'd arrays
      for(int i=0; i<NumberOfStrings; i++)
      {
        delete [] XMLString[i];
      }       
    }
    char** XMLString;
    int NumberOfStrings;
  };

}

// entry point to get XML as a string
C_EXPORT void C_DECL ParaViewPluginXMLList(int& num, char** & xml)
{
  static StaticInitXML staticinit;
  num = staticinit.NumberOfStrings;
  xml = staticinit.XMLString;
}
#endif // HAVE_XML

#if @HAVE_SRCS@

#include "vtkProcessModule.h"
#include "vtkClientServerInterpreter.h"

extern "C" void @MODULE_NAME@_Initialize(vtkClientServerInterpreter *arlu);

namespace {
  class StaticInitSMWrappings
  {
    public:
    StaticInitSMWrappings(void (*initfunc)(vtkClientServerInterpreter*))
    {
      // try to tell paraview what client/server wrappings this plugin provides
      // if the process module isn't initialize, its because someone linked
      // against this plugin directly and it got loaded before paraview
      // initialized.  In that case, its the developer's job to call the 
      // @MODULE_NAME@_Initialize function at the appropriate time.
      vtkProcessModule* processModule = vtkProcessModule::GetProcessModule();
      if(processModule && processModule->GetInterpreter())
      {
        (*initfunc)(processModule->GetInterpreter());
      }
    }
  };
}
static StaticInitSMWrappings InitSMWrappings(@MODULE_NAME@_Initialize);

#endif // HAVE_SRCS

