# Prepare to automatically install binary dependencies ...
SET(OVERVIEW_BINARY_LOCATIONS )

# Install the branded OverView binary ...
INSTALL(
  PROGRAMS "${EXECUTABLE_OUTPUT_PATH}/${OVERVIEW_BRANDED_APPLICATION_TITLE}.app/Contents/MacOS/${OVERVIEW_BRANDED_APPLICATION_TITLE}"
  DESTINATION bin
  COMPONENT ${OVERVIEW_BRANDED_APPLICATION_TITLE}
  )

LIST(APPEND OVERVIEW_BINARY_LOCATIONS "${EXECUTABLE_OUTPUT_PATH}/${OVERVIEW_BRANDED_APPLICATION_TITLE}.app/Contents/MacOS/${OVERVIEW_BRANDED_APPLICATION_TITLE}")

# Install required brand plugins ...
LIST(LENGTH OVERVIEW_STARTUP_PLUGIN_FILES PLUGIN_COUNT)

SET(PLUGIN 0)
WHILE(PLUGIN LESS ${PLUGIN_COUNT})
  
  LIST(GET OVERVIEW_STARTUP_PLUGIN_FILES ${PLUGIN} PLUGIN_FILE)
  LIST(GET OVERVIEW_STARTUP_PLUGIN_DIRECTORIES ${PLUGIN} PLUGIN_DIRECTORY)

  INSTALL(
    PROGRAMS "${PLUGIN_DIRECTORY}/${PLUGIN_FILE}"
    DESTINATION bin/${OVERVIEW_BRANDED_APPLICATION_TITLE}-startup 
    COMPONENT ${OVERVIEW_BRANDED_APPLICATION_TITLE}
    )

  LIST(APPEND OVERVIEW_BINARY_LOCATIONS "${PLUGIN_DIRECTORY}/${PLUGIN_FILE}")

  MATH(EXPR PLUGIN "${PLUGIN} + 1")

ENDWHILE()

# Install library dependencies ...
CONFIGURE_FILE( "@OverViewCore_SOURCE_DIR@/dependencies.cmake.in" "${CMAKE_CURRENT_BINARY_DIR}/dependencies.cmake" @ONLY)
INSTALL(SCRIPT "${CMAKE_CURRENT_BINARY_DIR}/dependencies.cmake" COMPONENT ${OVERVIEW_BRANDED_APPLICATION_TITLE})

# Install Qt plugins that can't be identified by automatic dependency generation ...
INSTALL(
 DIRECTORY
  "@QT_PLUGINS_DIR@/codecs"
  "@QT_PLUGINS_DIR@/imageformats"
  "@QT_PLUGINS_DIR@/sqldrivers"
 DESTINATION bin
 COMPONENT ${OVERVIEW_BRANDED_APPLICATION_TITLE}
 )

# Add a custom target that installs the brand only ...
ADD_CUSTOM_TARGET(Install-${OVERVIEW_BRANDED_APPLICATION_TITLE}
  ${CMAKE_COMMAND}
  -D "CMAKE_INSTALL_COMPONENT=${OVERVIEW_BRANDED_APPLICATION_TITLE}"
  -D "CMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX}/${OVERVIEW_BRANDED_APPLICATION_TITLE}"
  -P "${CMAKE_CURRENT_BINARY_DIR}/cmake_install.cmake"
  )

# Add a custom target that packages the brand only ...
CONFIGURE_FILE("@OverViewCore_SOURCE_DIR@/BundleStartup.sh.in" "${CMAKE_CURRENT_BINARY_DIR}/BundleStartup.sh" @ONLY)
CONFIGURE_FILE("@OverViewCore_SOURCE_DIR@/Info.plist.in" "${CMAKE_CURRENT_BINARY_DIR}/Info.plist" @ONLY)

ADD_CUSTOM_TARGET(Package-${OVERVIEW_BRANDED_APPLICATION_TITLE}
  ${CMAKE_CPACK_COMMAND}
  -G Bundle
  -D "CPACK_CMAKE_GENERATOR=@CMAKE_GENERATOR@"
  -D "CPACK_BUNDLE_NAME=${OVERVIEW_BRANDED_APPLICATION_TITLE} ${OVERVIEW_BRANDED_VERSION}"
  -D "CPACK_BUNDLE_ICON=${OVERVIEW_BRANDED_APPLICATION_ICON}"
  -D "CPACK_BUNDLE_PLIST=${CMAKE_CURRENT_BINARY_DIR}/Info.plist"
  -D "CPACK_BUNDLE_STARTUP_COMMAND=${CMAKE_CURRENT_BINARY_DIR}/BundleStartup.sh"
  -D "CPACK_PACKAGE_ICON=${OVERVIEW_BRANDED_APPLICATION_ICON}"
  -D "CPACK_PACKAGE_FILE_NAME=${OVERVIEW_BRANDED_APPLICATION_TITLE}-Setup-${OVERVIEW_BRANDED_VERSION}"
  -D "CPACK_PACKAGE_DESCRIPTION=Informatics client"
  -D "CPACK_PACKAGE_NAME=${OVERVIEW_BRANDED_APPLICATION_TITLE} ${OVERVIEW_BRANDED_VERSION}"
  -D "CPACK_PACKAGE_VERSION=${OVERVIEW_BRANDED_VERSION}"
  -D "CPACK_PACKAGE_VERSION_MAJOR=${OVERVIEW_BRANDED_VERSION_MAJOR}"
  -D "CPACK_PACKAGE_VERSION_MINOR=${OVERVIEW_BRANDED_VERSION_MINOR}"
  -D "CPACK_PACKAGE_VERSION_PATCH=${OVERVIEW_BRANDED_VERSION_PATCH}"
  -D "CPACK_INSTALL_CMAKE_PROJECTS=${CMAKE_CURRENT_BINARY_DIR}\\;${OVERVIEW_BRANDED_APPLICATION_TITLE} ${OVERVIEW_BRANDED_VERSION}\\;${OVERVIEW_BRANDED_APPLICATION_TITLE}\\;/"
  -D "CPACK_RESOURCE_FILE_LICENSE=@OverViewCore_SOURCE_DIR@/COPYING"
  )

