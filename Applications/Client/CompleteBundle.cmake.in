# Make sure this CMake has BundleUtilities.cmake:
#
if(NOT EXISTS "${CMAKE_ROOT}/Modules/BundleUtilities.cmake")
  message(FATAL_ERROR "error: BundleUtilities.cmake not found. Use CMake 2.6.2 or later.")
endif(NOT EXISTS "${CMAKE_ROOT}/Modules/BundleUtilities.cmake")


# Avoid following symlinks encountered during FILE GLOB_RECURSE calls:
#
if(COMMAND CMAKE_POLICY)
  cmake_policy(SET CMP0009 NEW)
endif(COMMAND CMAKE_POLICY)


# gp_item_default_embedded_path_override item default_embedded_path_var
#
# Return the path that others should refer to the item by when the item
# is embedded inside a bundle.
#
# This is a project-specific override of BundleUtilities.cmake's
# gp_item_default_embedded_path
#
function(gp_item_default_embedded_path_override item default_embedded_path_var)

  # By default, embed items as set by gp_item_default_embedded_path:
  #
  set(path "${${default_embedded_path_var}}")

  # But for ParaView...
  #
  # ...embed *.dylib in the Libraries folder:
  #
  if(item MATCHES "\\.dylib$")
    set(path "@executable_path/../Libraries")
  endif(item MATCHES "\\.dylib$")

  # ...embed *Plugin.dylib in the Plugins folder:
  #
  if(item MATCHES "Plugin\\.dylib$")
    set(path "@executable_path/../Plugins")
  endif(item MATCHES "Plugin\\.dylib$")

  # ...embed *.so in the Plugins folder:
  #
  if(item MATCHES "\\.so$")
    set(path "@executable_path/../Plugins")
  endif(item MATCHES "\\.so$")

  # ...embed *Python.so in the Libraries folder:
  #
  if(item MATCHES "Python\\.so$")
    set(path "@executable_path/../Libraries")
  endif(item MATCHES "Python\\.so$")

  set(${default_embedded_path_var} "${path}" PARENT_SCOPE)
endfunction(gp_item_default_embedded_path_override)


# Copy the .app bundle from the build tree to the install tree:
#
execute_process(COMMAND "@OSX_MAKE_STANDALONE_BUNDLE_BASH_SCRIPT@")


# Fixup the .app bundle in the install tree:
#
include(BundleUtilities)

# Read the list of ParaView plugins from the file configured by ParaView:
#
file(READ "@ParaView_BINARY_DIR@/PluginList.txt" PluginList)

# GLOB the list of Python.so files (treat them like plugins, too, for
# fixup_bundle purposes since they will not be pulled in automatically
# by dependency analysis)
#
file(GLOB PythonModules "@LIBRARY_OUTPUT_PATH@/*Python.so")

# Fix it!
#
fixup_bundle(
  "$ENV{DESTDIR}/Applications/ParaView @PARAVIEW_VERSION_MAJOR@.@PARAVIEW_VERSION_MINOR@.@PARAVIEW_VERSION_PATCH@.app"
  "${PythonModules};${PluginList}"
  "@LIBRARY_OUTPUT_PATH@"
  )
