/*=========================================================================

   Program:   ParaQ
   Module:    $RCSfile: pqObjectInspectorWidget.cxx,v $

   Copyright (c) 2005,2006 Sandia Corporation, Kitware Inc.
   All rights reserved.

   ParaQ is a free software; you can redistribute it and/or modify it
   under the terms of the ParaQ license version 1.1. 

   See License_v1.1.txt for the full ParaQ license.
   A copy of this license can be obtained by contacting
   Kitware Inc.
   28 Corporate Drive
   Clifton Park, NY 12065
   USA

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHORS OR
CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

=========================================================================*/

#include "pqObjectInspectorWidget.h"

// Qt includes
#include <QVBoxLayout>
#include <QScrollArea>
#include <QPushButton>

// vtk includes
#include "QVTKWidget.h"

// paraview includes

// paraq includes
#include "pqAutoGeneratedObjectPanel.h"
#include "pqLoadedFormObjectPanel.h"
#include "pqPipelineData.h"
#include "pqPipelineDisplay.h"
#include "pqPipelineModel.h"
#include "pqPipelineSource.h"
#include "pqServerManagerModel.h"

pqObjectInspectorWidget::pqObjectInspectorWidget(QWidget *p)
  : QWidget(p)
{
  this->setObjectName("ObjectInspectorWidget");

  this->TabWidget = 0;

  this->ObjectPanel = new pqAutoGeneratedObjectPanel(this);
  this->ObjectPanel->setObjectName("Editor");

  this->TabWidget = new QTabWidget(this);
  QScrollArea* s = new QScrollArea();
  s->setVerticalScrollBarPolicy(Qt::ScrollBarAsNeeded);
  s->setHorizontalScrollBarPolicy(Qt::ScrollBarAlwaysOff);
  s->setWidgetResizable(true);
  s->setObjectName("ScrollView");
  QVBoxLayout *boxLayout = new QVBoxLayout(s);
  boxLayout->setMargin(0);

  this->TabWidget->addTab(s, "");
  this->TabWidget->setObjectName("TabWidget");
  this->TabWidget->hide();
  
  // main layout
  boxLayout = new QVBoxLayout(this);
  boxLayout->setMargin(0);

  QBoxLayout* buttonlayout = new QHBoxLayout();
  boxLayout->addLayout(buttonlayout);
  QPushButton* acceptButton = new QPushButton(this);
  acceptButton->setObjectName("Accept");
  acceptButton->setText(tr("Accept"));
  QPushButton* resetButton = new QPushButton(this);
  resetButton->setObjectName("Reset");
  resetButton->setText(tr("Reset"));
  buttonlayout->addWidget(acceptButton);
  buttonlayout->addWidget(resetButton);

  boxLayout->addWidget(this->ObjectPanel);
  
  
  this->connect(acceptButton, SIGNAL(pressed()), SLOT(accept()));
  this->connect(resetButton, SIGNAL(pressed()), SLOT(reset()));

  acceptButton->setEnabled(false);
  resetButton->setEnabled(false);
  
  QObject::connect(&pqObjectPanel::PropertyManager, SIGNAL(canAcceptOrReject(bool)), 
                   acceptButton, SLOT(setEnabled(bool)));
  QObject::connect(&pqObjectPanel::PropertyManager, SIGNAL(canAcceptOrReject(bool)), 
                   resetButton, SLOT(setEnabled(bool)));
}

pqObjectInspectorWidget::~pqObjectInspectorWidget()
{
}

void pqObjectInspectorWidget::setProxy(vtkSMProxy *proxy)
{
  pqSMProxy old = this->ObjectPanel->proxy();
  if(old == proxy)
    {
    return;
    }

  // make sure proxy is built
  if(proxy)
    {
    proxy->UpdateVTKObjects();
    proxy->UpdatePropertyInformation();
    }
  
  pqLoadedFormObjectPanel* customForm = NULL;

  if(proxy)
    {
    // try to find a custom form in our pqWidgets resources
    QString proxyui = QString(":/pqWidgets/") + QString(proxy->GetXMLName()) + QString(".ui");
    customForm = new pqLoadedFormObjectPanel(proxyui, NULL);
    if(!customForm->isValid())
      {
      delete customForm;
      customForm = NULL;
      }
    }

  // set up layout for with or without custom form
  if(customForm && this->TabWidget->isHidden())
    {
    this->layout()->removeWidget(this->ObjectPanel);
    this->ObjectPanel->setParent(NULL);
    this->TabWidget->addTab(this->ObjectPanel, "Advanced");

    this->layout()->addWidget(this->TabWidget);
    QScrollArea* s = qobject_cast<QScrollArea*>(this->TabWidget->widget(0));
    s->setWidget(customForm);
    this->TabWidget->setTabText(0, proxy->GetXMLName());
    this->TabWidget->show();
    }
  else if(customForm && !this->TabWidget->isHidden())
    {
    QScrollArea* s = qobject_cast<QScrollArea*>(this->TabWidget->widget(0));
    QWidget* lastform = s->takeWidget();
    delete lastform;
    s->setWidget(customForm);
    this->TabWidget->setTabText(0, proxy->GetXMLName());
    }
  else if(!customForm && !this->TabWidget->isHidden())
    {
    // we don't have a custom form, make sure we don't show one, if we did previously
    QScrollArea* s = qobject_cast<QScrollArea*>(this->TabWidget->widget(0));
    QWidget* lastform = s->takeWidget();
    delete lastform;
    this->layout()->removeWidget(this->TabWidget);
    this->TabWidget->removeTab(1);
    this->TabWidget->hide();
    this->ObjectPanel->setParent(NULL);
    this->layout()->addWidget(this->ObjectPanel);
    this->ObjectPanel->show();
    }

  if(customForm)
    {
    customForm->setProxy(proxy);
    }

  this->ObjectPanel->setProxy(proxy);
}

void pqObjectInspectorWidget::accept()
{
  pqSMProxy proxy = this->ObjectPanel->proxy();
  if(!proxy)
    {
    return;
    }

  pqObjectPanel::PropertyManager.accept();
  
  // cause the screen to update
  pqPipelineSource *source = 
    pqServerManagerModel::instance()->getPQSource(proxy);
  if(source)
    {
    // FIXME
    // source->getDisplay()->UpdateWindows();
    }
}

void pqObjectInspectorWidget::reset()
{
  pqSMProxy proxy = this->ObjectPanel->proxy();
  if(!proxy)
    {
    return;
    }

  pqObjectPanel::PropertyManager.reject();
}
