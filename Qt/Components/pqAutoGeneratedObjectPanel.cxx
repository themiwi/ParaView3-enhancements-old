/*=========================================================================

   Program: ParaView
   Module:    $RCSfile: pqAutoGeneratedObjectPanel.cxx,v $

   Copyright (c) 2005,2006 Sandia Corporation, Kitware Inc.
   All rights reserved.

   ParaView is a free software; you can redistribute it and/or modify it
   under the terms of the ParaView license version 1.1. 

   See License_v1.1.txt for the full ParaView license.
   A copy of this license can be obtained by contacting
   Kitware Inc.
   28 Corporate Drive
   Clifton Park, NY 12065
   USA

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHORS OR
CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

=========================================================================*/

// this include
#include "pqAutoGeneratedObjectPanel.h"

// Qt includes
#include <QHBoxLayout>
#include <QVBoxLayout>
#include <QLabel>
#include <QComboBox>
#include <QCheckBox>
#include <QLineEdit>
#include <QPushButton>
#include <QListWidget>
#include <QScrollArea>
#include <QGroupBox>
#include <QSlider>
#include <QDoubleSpinBox>
#include <QApplication>

// VTK includes

// ParaView Server Manager includes
#include "vtkSMProperty.h"
#include "vtkSMPropertyIterator.h"

// ParaView includes
#include "pqSMAdaptor.h"
#include "pqProxy.h"


/// constructor
pqAutoGeneratedObjectPanel::pqAutoGeneratedObjectPanel(QWidget* p)
  : pqNamedObjectPanel(p)
{
  this->PanelLayout = new QGridLayout(this);
}

/// destructor
pqAutoGeneratedObjectPanel::~pqAutoGeneratedObjectPanel()
{
  if(this->Proxy)
    {
    this->unlinkServerManagerProperties();
    this->deleteWidgets();
    }
  this->Proxy = NULL;
}

/// set the proxy to display properties for
void pqAutoGeneratedObjectPanel::setProxyInternal(pqProxy* p)
{
  if(this->Proxy)
    {
    this->unlinkServerManagerProperties();
    this->deleteWidgets();
    }

  this->pqNamedObjectPanel::setProxyInternal(p);

  if(this->Proxy)
    {
    this->createWidgets();
    this->linkServerManagerProperties();
    }
}

void pqAutoGeneratedObjectPanel::createWidgets()
{

  if(!this->Proxy)
    {
    return;
    }


  int rowCount = 0;

  // query for proxy properties, and create widgets
  vtkSMPropertyIterator *iter = this->Proxy->getProxy()->NewPropertyIterator();
  for(iter->Begin(); !iter->IsAtEnd(); iter->Next())
    {
    vtkSMProperty* SMProperty = iter->GetProperty();

    // skip information properties
    if(SMProperty->GetInformationOnly() || SMProperty->GetIsInternal())
      {
      continue;
      }

    // update domains we might ask for
    SMProperty->UpdateDependentDomains();

    pqSMAdaptor::PropertyType pt = pqSMAdaptor::getPropertyType(SMProperty);

    // skip input properties
    if(pt == pqSMAdaptor::PROXY || pt == pqSMAdaptor::PROXYLIST)
      {
      if(SMProperty == this->Proxy->getProxy()->GetProperty("Input"))
        {
        continue;
        }
      }

    if(pt == pqSMAdaptor::PROXY)
      {
      // create a combo box with list of proxies
      QComboBox* combo = new QComboBox(this->PanelLayout->parentWidget());
      combo->setObjectName(iter->GetKey());
      QLabel* label = new QLabel(this->PanelLayout->parentWidget());
      label->setText(iter->GetKey());
      this->PanelLayout->addWidget(label, rowCount, 0, 1, 1);
      this->PanelLayout->addWidget(combo, rowCount, 1, 1, 1);
      rowCount++;
      }
    else if(pt == pqSMAdaptor::PROXYLIST)
      {
      // create a list of selections of proxies
      }
    else if (pt==pqSMAdaptor::PROXYSELECTION)
      {
      // create a combo box with list of proxies
      QComboBox* combo = new QComboBox(this->PanelLayout->parentWidget());
      combo->setObjectName(iter->GetKey());
      QLabel* label = new QLabel(this->PanelLayout->parentWidget());
      label->setText(iter->GetKey());
      this->PanelLayout->addWidget(label, rowCount, 0, 1, 1);
      this->PanelLayout->addWidget(combo, rowCount, 1, 1, 1);
      rowCount++;

      QGroupBox* group = new QGroupBox(this->PanelLayout->parentWidget());
      group->setObjectName(QString("WidgetBox.") + iter->GetKey());
      group->setLayout(new QVBoxLayout(group));
      this->PanelLayout->addWidget(group, rowCount, 0, 1, 2);
      group->hide();
      rowCount++;
      }
    else if(pt == pqSMAdaptor::ENUMERATION)
      {
      QVariant enum_property = pqSMAdaptor::getEnumerationProperty(SMProperty);
      if(enum_property.type() == QVariant::Bool)
        {
        // check box for true/false
        QCheckBox* check;
        check = new QCheckBox(iter->GetKey(), 
                              this->PanelLayout->parentWidget());
        check->setObjectName(iter->GetKey());
        this->PanelLayout->addWidget(check, rowCount, 0, 1, 2);
        rowCount++;
        }
      else
        {
        // combo box with strings
        QComboBox* combo = new QComboBox(this->PanelLayout->parentWidget());
        combo->setObjectName(iter->GetKey());
        QLabel* label = new QLabel(this->PanelLayout->parentWidget());
        label->setText(iter->GetKey());

        this->PanelLayout->addWidget(label, rowCount, 0, 1, 1);
        this->PanelLayout->addWidget(combo, rowCount, 1, 1, 1);
        rowCount++;
        }
      }
    else if(pt == pqSMAdaptor::SELECTION)
      {
      QList<QList<QVariant> > items;
      items = pqSMAdaptor::getSelectionProperty(SMProperty);
      QListWidget* lw = new QListWidget(this->PanelLayout->parentWidget());
      lw->setObjectName(iter->GetKey());
      this->PanelLayout->addWidget(lw, rowCount, 0, 1, 2);
      rowCount++;
      }
    else if(pt == pqSMAdaptor::SINGLE_ELEMENT)
      {
      QVariant elem_property = pqSMAdaptor::getElementProperty(SMProperty);
      QList<QVariant> propertyDomain;
      propertyDomain = pqSMAdaptor::getElementPropertyDomain(SMProperty);
      if(elem_property.type() == QVariant::String && propertyDomain.size())
        {
        // combo box with strings
        QComboBox* combo = new QComboBox(this->PanelLayout->parentWidget());
        combo->setObjectName(iter->GetKey());
        QLabel* label = new QLabel(this->PanelLayout->parentWidget());
        label->setText(iter->GetKey());
        
        this->PanelLayout->addWidget(label, rowCount, 0, 1, 1);
        this->PanelLayout->addWidget(combo, rowCount, 1, 1, 1);
        rowCount++;
        }
      else if(elem_property.type() == QVariant::Int && 
              propertyDomain.size() == 2)
        {
        QLabel* label = new QLabel(this->PanelLayout->parentWidget());
        label->setText(iter->GetKey());
        QSlider* slider;
        slider = new QSlider(Qt::Horizontal, this->PanelLayout->parentWidget());
        slider->setObjectName(QString(iter->GetKey()) + ":Slider");
        slider->setRange(propertyDomain[0].toInt(), propertyDomain[1].toInt());

        QLineEdit* lineEdit = new QLineEdit(this->PanelLayout->parentWidget());
        lineEdit->setObjectName(iter->GetKey());
        
        this->PanelLayout->addWidget(label, rowCount, 0, 1, 1);
        QHBoxLayout* hlayout = new QHBoxLayout;
        hlayout->addWidget(slider);
        hlayout->addWidget(lineEdit);
        this->PanelLayout->addLayout(hlayout, rowCount, 1, 1, 1);
        slider->show();
        lineEdit->show();
        rowCount++;
        }
      else if(elem_property.type() == QVariant::Double && 
              propertyDomain.size() == 2)
        {
        double range[2];
        range[0] = propertyDomain[0].toDouble();
        range[1] = propertyDomain[1].toDouble();
        QLabel* label = new QLabel(this->PanelLayout->parentWidget());
        label->setText(iter->GetKey());
        QDoubleSpinBox* spinBox;
        spinBox = new QDoubleSpinBox(this->PanelLayout->parentWidget());
        spinBox->setObjectName(iter->GetKey());
        spinBox->setRange(range[0], range[1]);
        spinBox->setSingleStep((range[1] - range[0]) / 20.0);

        this->PanelLayout->addWidget(label, rowCount, 0, 1, 1);
        this->PanelLayout->addWidget(spinBox, rowCount, 1, 1, 1);
        rowCount++;
        }
      else
        {
        QLineEdit* lineEdit = new QLineEdit(this->PanelLayout->parentWidget());
        lineEdit->setObjectName(iter->GetKey());
        QLabel* label = new QLabel(this->PanelLayout->parentWidget());
        label->setText(iter->GetKey());
        
        this->PanelLayout->addWidget(label, rowCount, 0, 1, 1);
        this->PanelLayout->addWidget(lineEdit, rowCount, 1, 1, 1);
        rowCount++;
        }
      }
    else if(pt == pqSMAdaptor::MULTIPLE_ELEMENTS)
      {
      QList<QVariant> list_property;
      list_property = pqSMAdaptor::getMultipleElementProperty(SMProperty);
      
      QLabel* label = new QLabel(this->PanelLayout->parentWidget());
      label->setText(iter->GetKey());
      this->PanelLayout->addWidget(label, rowCount, 0, 1, 1);
      QGridLayout* glayout = new QGridLayout;
      glayout->setObjectName(iter->GetKey());
      this->PanelLayout->addLayout(glayout, rowCount, 1, 1, 1);

      int i=0;
      if(list_property.size() == 6)
        {
        // 3x2
        foreach(QVariant v, list_property)
          {
          QString num;
          num.setNum(i);
          QLineEdit* lineEdit;
          lineEdit = new QLineEdit(this->PanelLayout->parentWidget());
          lineEdit->setObjectName(QString(iter->GetKey()) + QString(":") + num);
          glayout->addWidget(lineEdit, i/2, i%2, 1, 1);
          lineEdit->show();
          i++;
          }
        }
      else
        {
        // all on one line
        foreach(QVariant v, list_property)
          {
          QString num;
          num.setNum(i);
          QLineEdit* lineEdit;
          lineEdit = new QLineEdit(this->PanelLayout->parentWidget());
          lineEdit->setObjectName(QString(iter->GetKey()) + QString(":") + num);
          glayout->addWidget(lineEdit, 0, i, 1, 1);
          lineEdit->show();
          i++;
          }
        }
        rowCount++;
      }
    else if(pt == pqSMAdaptor::FILE_LIST)
      {
      QLineEdit* lineEdit = new QLineEdit(this->PanelLayout->parentWidget());
      lineEdit->setObjectName(iter->GetKey());
      QLabel* label = new QLabel(this->PanelLayout->parentWidget());
      label->setText(iter->GetKey());
      
      this->PanelLayout->addWidget(label, rowCount, 0, 1, 1);
      this->PanelLayout->addWidget(lineEdit, rowCount, 1, 1, 1);
      rowCount++;
      }
    else if(pt == pqSMAdaptor::FIELD_SELECTION)
      {
      // use two combo boxes for field selections
      // 1. picks the type of array [ cell, point, ... ]
      // 1. picks the array
      
      QLabel* label = new QLabel(this->PanelLayout->parentWidget());
      label->setText("Attribute Mode");
      QComboBox* combo = new QComboBox(this->PanelLayout->parentWidget());
      combo->setObjectName(QString(iter->GetKey()) + ":mode" );
      this->PanelLayout->addWidget(label, rowCount, 0, 1, 1);
      this->PanelLayout->addWidget(combo, rowCount, 1, 1, 1);
      rowCount++;
      
      label = new QLabel(this->PanelLayout->parentWidget());
      label->setText("Scalars");
      combo = new QComboBox(this->PanelLayout->parentWidget());
      combo->setObjectName(QString(iter->GetKey()) + ":scalars" );
      this->PanelLayout->addWidget(label, rowCount, 0, 1, 1);
      this->PanelLayout->addWidget(combo, rowCount, 1, 1, 1);
      rowCount++;
      }
    }
  iter->Delete();
  this->PanelLayout->addItem(new QSpacerItem(0,0,
                                             QSizePolicy::Expanding,
                                             QSizePolicy::Expanding), 
                             rowCount, 0, 1, 2);
  this->PanelLayout->invalidate();
}

static void pqAutoGeneratedObjectPanelDeleteWidgets(QLayoutItem* item)
{
  if(item->widget())
    {
    delete item->widget();
    }
  else if(item->layout())
    {
    QLayoutItem *child;
    while ((child = item->layout()->takeAt(0)) != 0) 
      {
      pqAutoGeneratedObjectPanelDeleteWidgets(child);
      delete child;
      }
    delete item->layout();
    }
}

void pqAutoGeneratedObjectPanel::deleteWidgets()
{
  // delete all child widgets
  QLayoutItem *child;
  while ((child = this->PanelLayout->takeAt(0)) != 0) 
    {
    pqAutoGeneratedObjectPanelDeleteWidgets(child);
    }
}


