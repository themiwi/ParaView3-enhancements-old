INCLUDE_DIRECTORIES(
  ${VTK_INCLUDE_DIR}
  ${PARAVIEW_INCLUDE_DIRS}
)

SET(STREAMING_SS_SOURCES
  vtkPiece.cxx 
  vtkPieceCacheFilter.cxx
  vtkPieceCacheExecutive.cxx
  vtkPieceList.cxx
  vtkPVSGeometryInformation.cxx
  vtkRawStridedReader.cxx
  vtkSMSImageDataParallelStrategy.cxx
  vtkSMStreamingOptionsProxy.cxx
  vtkSMStreamingOutputPort.cxx
  vtkSMStreamingRepresentation.cxx 
  vtkSMStreamingSerialStrategy.cxx 
  vtkSMStreamingViewHelper.cxx
  vtkSMStreamingViewProxy.cxx
  vtkSMSUniformGridParallelStrategy.cxx
  vtkSMSUnstructuredDataParallelStrategy.cxx
  vtkSMSUnstructuredGridParallelStrategy.cxx
  vtkStreamingFactory.cxx
  vtkStreamingOptions.cxx
  vtkStreamingUpdateSuppressor.cxx
  vtkVisibilityPrioritizer.cxx
)

ADD_PARAVIEW_PLUGIN(StreamingSSPlugin "1.0"
  SERVER_MANAGER_XML StreamingServerManagerXML.xml 
  SERVER_MANAGER_SOURCES ${STREAMING_SS_SOURCES}
)

IF (PARAVIEW_ENABLE_PYTHON)
  #Wrap in plugin in python.
  #Note this must be streamlined:
  #this whole thing is a copy of Servers/ServerManager/CMakeLists.txt's wrapping
  #with the one line call to VTK/Common/KitCommonPythonWrapBlock inlined just 
  #so that plugin's name does not to have a name starting with "vtk".
  SET_SOURCE_FILES_PROPERTIES(
    vtkStreamingUpdateSuppressor.cxx
    vtkPVSGeometryInformation.cxx
    vtkSMStreamingViewHelper.cxx
    WRAP_EXCLUDE)

  SET(Kit_PYTHON_EXTRA_SRCS)
  SET(KIT_PYTHON_LIBS
    vtkPVServerManagerPythonD
    StreamingSSPlugin)
  # Tell vtkWrapPython.cmake to set VTK_PYTHON_LIBRARIES for us.
  SET(VTK_WRAP_PYTHON_FIND_LIBS 1)
  INCLUDE("${VTK_CMAKE_DIR}/vtkWrapPython.cmake")
  INCLUDE_DIRECTORIES(${PYTHON_INCLUDE_PATH})
  SET(KIT_PYTHON_DEPS)
  SET(VTK_INSTALL_NO_LIBRARIES 1)
  IF(VTKPythonWrapping_INSTALL_BIN_DIR)
    SET(VTK_INSTALL_NO_LIBRARIES)
  ENDIF(VTKPythonWrapping_INSTALL_BIN_DIR)

#   SET(VTK_INSTALL_LIB_DIR      "${VTKPythonWrapping_INSTALL_LIB_DIR}")
#   SET(VTK_INSTALL_BIN_DIR      "${VTKPythonWrapping_INSTALL_BIN_DIR}")
  SET(VTK_INSTALL_LIB_DIR_CM24 "${VTKPythonWrapping_INSTALL_LIB_DIR}")
  SET(VTK_INSTALL_BIN_DIR_CM24 "${VTKPythonWrapping_INSTALL_BIN_DIR}")

  # Create custom commands to generate the python wrappers for this kit.
  VTK_WRAP_PYTHON3(StreamingSSPluginPython KitPython_SRCS "${STREAMING_SS_SOURCES}")

  # Create a shared library containing the python wrappers.  Executables
  # can link to this but it is not directly loaded dynamically as a
  # module.
  ADD_LIBRARY(StreamingSSPluginPythonD ${KitPython_SRCS} ${Kit_PYTHON_EXTRA_SRCS})
  TARGET_LINK_LIBRARIES(StreamingSSPluginPythonD StreamingSSPlugin ${KIT_PYTHON_LIBS})
  IF(NOT VTK_INSTALL_NO_LIBRARIES)
    INSTALL(TARGETS StreamingSSPluginPythonD
      RUNTIME DESTINATION ${VTK_INSTALL_BIN_DIR_CM24} COMPONENT RuntimeLibraries
      LIBRARY DESTINATION ${VTK_INSTALL_LIB_DIR_CM24} COMPONENT RuntimeLibraries
      ARCHIVE DESTINATION ${VTK_INSTALL_LIB_DIR_CM24} COMPONENT Development)
  ENDIF(NOT VTK_INSTALL_NO_LIBRARIES)
  SET(KIT_LIBRARY_TARGETS ${KIT_LIBRARY_TARGETS} StreamingSSPluginPythonD)
  
  # On some UNIX platforms the python library is static and therefore
  # should not be linked into the shared library.  Instead the symbols
  # are exported from the python executable so that they can be used by
  # shared libraries that are linked or loaded.  On Windows and OSX we
  # want to link to the python libray to resolve its symbols
  # immediately.
  IF(WIN32 OR APPLE)
    TARGET_LINK_LIBRARIES (StreamingSSPluginPythonD ${VTK_PYTHON_LIBRARIES})
  ENDIF(WIN32 OR APPLE)
  
  # Add dependencies that may have been generated by VTK_WRAP_PYTHON3 to
  # the python wrapper library.  This is needed for the
  # pre-custom-command hack in Visual Studio 6.
  IF(KIT_PYTHON_DEPS)
    ADD_DEPENDENCIES(StreamingSSPluginPythonD ${KIT_PYTHON_DEPS})
  ENDIF(KIT_PYTHON_DEPS)
  
  # Create a python module that can be loaded dynamically.  It links to
  # the shared library containing the wrappers for this kit.
  PYTHON_ADD_MODULE(StreamingSSPluginPython StreamingSSPluginPythonInit.cxx)
  IF(PYTHON_ENABLE_MODULE_StreamingSSPluginPython)
    TARGET_LINK_LIBRARIES(StreamingSSPluginPython StreamingSSPluginPythonD)
    
    # Python extension modules on Windows must have the extension ".pyd"
    # instead of ".dll" as of Python 2.5.  Older python versions do support
    # this suffix.
    IF(WIN32 AND NOT CYGWIN)
      SET_TARGET_PROPERTIES(StreamingSSPluginPython PROPERTIES SUFFIX ".pyd")
    ENDIF(WIN32 AND NOT CYGWIN)
    
    # The python modules are installed by a setup.py script which does
    # not know how to adjust the RPATH field of the binary.  Therefore
    # we must simply build the modules with no RPATH at all.  The
    # vtkpython executable in the build tree should have the needed
    # RPATH anyway.
    SET_TARGET_PROPERTIES(StreamingSSPluginPython PROPERTIES SKIP_BUILD_RPATH 1)
    
    IF(WIN32 OR APPLE)
      TARGET_LINK_LIBRARIES (StreamingSSPluginPython ${VTK_PYTHON_LIBRARIES})
    ENDIF(WIN32 OR APPLE)
    
    # Generally the pyhon extension module created is installed using setup.py.
    # However projects that include VTK (such as ParaView) can override this
    # behaviour by not using setup.py, instead directly installing the extension
    # module at the same location as other libraries.
    IF (VTK_INSTALL_PYTHON_USING_CMAKE AND NOT VTK_INSTALL_NO_LIBRARIES)
      INSTALL(TARGETS StreamingSSPluginPython
        RUNTIME DESTINATION ${VTK_INSTALL_BIN_DIR_CM24} COMPONENT RuntimeLibraries
        LIBRARY DESTINATION ${VTK_INSTALL_LIB_DIR_CM24} COMPONENT RuntimeLibraries
        ARCHIVE DESTINATION ${VTK_INSTALL_LIB_DIR_CM24} COMPONENT Development)
    ENDIF (VTK_INSTALL_PYTHON_USING_CMAKE AND NOT VTK_INSTALL_NO_LIBRARIES)
  ENDIF(PYTHON_ENABLE_MODULE_StreamingSSPluginPython)

ENDIF (PARAVIEW_ENABLE_PYTHON)

ADD_SUBDIRECTORY(Testing)
